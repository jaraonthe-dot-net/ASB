/**
 * RISC-V commands
 */

/* LOAD/STORE */

// Helper
.define &calculate_address /register result''32, /variable imm''12(/register rs1''32) {
    &sign_extend result, imm
    &add result, result, rs1
}
// load byte
.define lb /register rd''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov rd'7:0, @address
    &sign_extend rd, rd'7:0
}
// Load half
.define lh /register rd''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov rd'7:0,  @address
    &add address, address, 1
    &mov rd'15:8, @address
    &sign_extend  rd'31:8, rd'15:8
}
// Load word
.define lw /register rd''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov rd'7:0,   @address
    &add address,   address, 1
    &mov rd'15:8,  @address
    &add address,   address, 1
    &mov rd'23:16, @address
    &add address,   address, 1
    &mov rd'31:24, @address
}
// Load byte unsigned
.define lbu /register rd''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov rd, 0
    &mov rd'7:0, @address
}
// Load half unsigned
.define lhu /register rd''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov rd, 0
    &mov rd'7:0,  @address
    &add address,  address, 1
    &mov rd'15:8, @address
}
// Load upper immediate
.define lui /register rd''32, /immediate upimm''20 {
    &mov rd, 0
    &mov rd'31:12, upimm
}

// Store byte
.define sb /register rs2''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov @address, rs2'7:0
}
// Store half
.define sh /register rs2''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov @address, rs2'7:0
    &add  address, address, 1
    &mov @address, rs2'15:8
}
// Store word
.define sw /register rs2''32, /immediate imm''12(/register rs1''32) {
    .variable address ''32; &calculate_address address, imm(rs1)
    
    &mov @address, rs2'7:0
    &add  address, address,  1
    &mov @address, rs2'15:8
    &add  address, address,  1
    &mov @address, rs2'23:16
    &add  address, address,  1
    &mov @address, rs2'31:24
}


/* ARITHMETIC */

// Add
.define add /register rd''32, /register rs1''32, /register rs2''32 {
    &add rd, rs1, rs2
}
// Add immediate
.define addi /register rd''32, /register rs1''32, /immediate imm''12 {
    .variable extended ''32; &sign_extend extended, imm
    &add rd, rs1, extended
}
// Sub
.define sub /register rd''32, /register rs1''32, /register rs2''32 {
    &sub rd, rs1, rs2
}

// Helper
.define &less_than_signed /register result''1, /register a''32, /register b''32 {
    &jumpif a'31 < b'31, false // a positive, b negative
    &jumpif a'31 > b'31, true  // a negative, b positive
    &jumpif a >= b, false      // both positive/negative
  true:
    &mov result, 1
    &jump end
  false:
    &mov result, 0
  end:
}
// Set less than
.define slt /register rd''32, /register rs1''32, /register rs2''32 {
    .variable result ''1
    
    &less_than_signed result, rs1, rs2
    &zero_extend rd, result
}
// Set less than immediate
.define slti /register rd''32, /register rs1''32, /immediate imm''12 {
    .variable extended ''32; &sign_extend extended, imm
    .variable result ''1
    
    &less_than_signed result, rs1, extended
    &zero_extend rd, result
}
// Set less than unsigned
.define sltu /register rd''32, /register rs1''32, /register rs2''32  {
    &jumpif rs1 >= rs2, else
    &mov rd, 1
    &jump end
  else:
    &mov rd, 0
  end:
}
// Set less than immediate unsigned
.define sltiu /register rd''32, /register rs1''32, /immediate imm''12 {
    .variable extended ''32; &sign_extend extended, imm
    
    &jumpif rs1 >= extended, else
    &mov rd, 1
    &jump end
  else:
    &mov rd, 0
  end:
}


/* M extension */

// Multiply
.define mul /register rd''32, /register rs1''32, /register rs2''32 {
    .variable result''64
    &mul result, rs1, rs2
    &mov rd, result'31:0
}
// Multiply high signed signed
.define mulh /register rd''32, /register rs1''32, /register rs2''32 {
    // sign-extend to double length before multiplying
    // (see https://en.wikipedia.org/wiki/Two%27s_complement#Multiplication)
    .variable ext1''64; &sign_extend ext1, rs1
    .variable ext2''64; &sign_extend ext2, rs2
    
    .variable result''128
    &mul result, rs1, rs2
    &mov rd, result'63:32
}
// Multiply high unsigned unsigned
.define mulhu /register rd''32, /register rs1''32, /register rs2''32 {
    .variable result''64
    &mul result, rs1, rs2
    &mov rd, result'63:32
}
// Multiply high signed unsigned
.define mulhsu /register rd''32, /register rs1''32, /register rs2''32 {
    .variable ext1''64; &sign_extend ext1, rs1
    .variable ext2''64; &zero_extend ext2, rs2
    
    .variable result''128
    &mul result, rs1, rs2
    &mov rd, result'63:32
}

// Helpers
.define &abs /register dst''32, /register src''32 {
    &mov dst, src
    &jumpif dst'31 == 0, end
    &twos_complement dst
  end:
}
.define &twos_complement /register reg''32 {
    &not reg, reg
    &add reg, reg, 1
}
// Divide
.define div /register rd''32, /register rs1''32, /register rs2''32 {
    &jumpif rs1'31 == 1, negative
    &jumpif rs2'31 == 1, negative
    
    &div rd, rs1, rs2
    &jump end
    
  negative:
    .variable result_is_negative''1
    &movif rs1'31 != rs2'31, result_is_negative, 1
    
    .variable abs1''32; &abs abs1, rs1
    .variable abs2''32; &abs abs2, rs2
    
    &div rd, abs1, abs2
    &jumpif result_is_negative == 0, end
    &twos_complement rd
  end:
}
// Remainder
.define rem /register rd''32, /register rs1''32, /register rs2''32 {
    &jumpif rs1'31 == 1, negative
    &jumpif rs2'31 == 1, negative
    
    &rem rd, rs1, rs2
    &jump end
    
  negative:
    .variable abs1''32; &abs abs1, rs1
    .variable abs2''32; &abs abs2, rs2
    
    &rem rd, abs1, abs2
    // remainder is negative if rs1 is negative
    &jumpif rs1'31 == 0, end
    &twos_complement rd
  end:
}

// Divide unsigned
.define divu /register rd''32, /register rs1''32, /register rs2''32 {
    &div rd, rs1, rs2
}
// Remainder unsigned
.define remu /register rd''32, /register rs1''32, /register rs2''32 {
    &rem rd, rs1, rs2
}


/* LOGICAL */

// And
.define and /register rd''32, /register rs1''32, /register rs2''32 {
    &and rd, rs1, rs2
}
// And immediate
.define andi /register rd''32, /register rs1''32, /immediate imm''12 {
    .variable extended ''32; &sign_extend extended, imm
    &and rd, rs1, extended
}

// Or
.define or /register rd''32, /register rs1''32, /register rs2''32 {
    &or rd, rs1, rs2
}
// Or immediate
.define ori /register rd''32, /register rs1''32, /immediate imm''12 {
    .variable extended ''32; &sign_extend extended, imm
    &or rd, rs1, extended
}

// Xor
.define xor /register rd''32, /register rs1''32, /register rs2''32 {
    &xor rd, rs1, rs2
}
// Xor immediate
.define xori /register rd''32, /register rs1''32, /immediate imm''12 {
    .variable extended ''32; &sign_extend extended, imm
    &xor rd, rs1, extended
}

// Helper
.define &sll /register rd''32, /register rs1''32, /register bits''5 {
    .variable rs1_start ''5; &sub rs1_start, 31, bits
    &mov rd'31:bits, rs1'rs1_start:0

    .variable bits_1 ''5; &add bits_1, bits, -1
    &mov rd'bits_1:0, 0
}
// Shift left logical
.define sll /register rd''32, /register rs1''32, /register rs2''32 {
    &sll rd, rs1, rs2'4:0
}
// Shift left logical immediate
.define slli /register rd''32, /register rs1''32, /immediate uimm''5 {
    &sll rd, rs1, uimm
}

// Shift right logical
.define srl /register rd''32, /register rs1''32, /register rs2''32 {
    &zero_extend rd, rs1'31:rs2
}
// Shift right logical immediate
.define srli /register rd''32, /register rs1''32, /immediate uimm''5 {
    &zero_extend rd, rs1'31:uimm
}

// Shift right arithmetic
.define sra /register rd''32, /register rs1''32, /register rs2''32 {
    &sign_extend rd, rs1'31:rs2
}
// Shift right arithmetic immediate
.define srai /register rd''32, /register rs1''32, /immediate uimm''5 {
    &sign_extend rd, rs1'31:uimm
}


/* FLOW CONTROL */

// Helper
.define &checkLabel /register label''32 {
    .variable tmp''32; &get_pc tmp
    &jumpif label > tmp, else
    
    &sub tmp, tmp, label
    &assert tmp <= 1024, "label address is too low for current pc"
    &jump end
    
  else:
    &sub tmp, label, tmp
    &assert tmp <= 1023, "label address is too high for current pc"
  end:
}
// Branch if =
.define beq /register rs1''32, /register rs2''32, /label label {
    &checkLabel label
    
    &jumpif rs1 != rs2, end
    &set_pc label
  end:
}
// Branch if !=
.define bne /register rs1''32, /register rs2''32, /label label {
    &checkLabel label
    
    &jumpif rs1 == rs2, end
    &set_pc label
  end:
}

// Branch if <
.define blt /register rs1''32, /register rs2''32, /label label {
    &checkLabel label
    
    .variable result''1;
    &less_than_signed result, rs1, rs2
    
    &jumpif result == 0, end
    &set_pc label
  end:
}
// Branch if >=
.define bge /register rs1''32, /register rs2''32, /label label {
    &checkLabel label
    
    
    .variable result''1;
    &less_than_signed result, rs1, rs2
    
    &jumpif result == 1, end
    &set_pc label
  end:
}
// Branch if < unsigned
.define bltu /register rs1''32, /register rs2''32, /label label {
    &checkLabel label
    
    &jumpif rs1 >= rs2, end
    &set_pc label
  end:
}
// Branch if >= unsigned
.define bgeu /register rs1''32, /register rs2''32, /label label {
    &checkLabel label
    
    &jumpif rs1 < rs2, end
    &set_pc label
  end:
}

// TODO: auipc, jalr, jal
