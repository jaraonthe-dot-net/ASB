// TODO experimental file for development; it will be removed/revamped at some point
.memory /* hello there */ .word ''5_9 .address ''32
//.pc ''1

.register a ''32
.register_alias b, a {.group cpy}
.register_virt a16r''16 .get {&MOV out, a; } .set {
    //doSomething {0\}
} .store ''5

    .define &shiftWide  {

/*    "}
  \"\n  
    "}*/
    }

.define lw /register rd ''32, /immediate imm12 ''12 (/register rs1 ''32) {
    .var extended ''32
    &sign_extend extended, imm12
    
    .var address ''32
    &add address, rs1, extended
    
    &mov rd'7:0, @address
    &add address, address, 1
    
    &mov rd'15:8, @address
    &add address, address, 1
    
    &mov rd'23:16, @address
    &add address, address, 1
    
    &mov rd'31:24, @address
}

//lw a, 0(b)
//lw b, 2(a)
//lw a, -13(a)


// AMD-64

.register_virtual rflags ''64 {
    .group flags
    .store ''32
    .get {
        &mov out'31:0, store
        &mov out'63:32, 0
    }
    .set {
        &mov store, in'31:0
        // ignore upper 32 bits
    }
}


.define add %/register source ''<=64 .group main, %/register source_dest ''<=64 .group main {
    .var ss ''max 65; &length ss, source
    .var sd ''max65;  &length sd, source_dest
    &assert ss <= sd, "Cannot add bigger source to smaller source_dest"
    
    .var sd1  ''max65; &add sd1,  sd,  1
    .var sd_1 ''MAX65; &add sd_1, sd, -1
    
   .var source_ext ''sd
    &sign_extend source_ext, source
    .var result ''sd1
    &addc result, source_ext, source_dest
    &mov source_dest, result'sd_1:0
    
    // set flags
    .var rflags_new''64; &mov rflags_new, rflags
    &mov rflags_new'0, result'sd // carry
    
    &mov rflags_new'6, 0 // zero
    //&setif result == 0, rflags_new'6
    
    &mov rflags_new'7, result'sd_1 // sign
    &mov rflags, rflags_new
}

&println "Hello World"
&print "a: "
&println a
