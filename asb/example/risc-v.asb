// TODO experimental file for development; it will be removed/revamped at some point

.include "../lib/risc-v/risc-v.asb"

addi ra, zero, 5
&println x1

add x5, x1, zero
&println t0
addi x5, x5, -25
&println t0

.define test_sign_extend {
    .variable test1 ''5;
    .variable test2 ''16;
    &mov test1, -12
    &sign_extend test2, test1
    
    &print test1; &print " => "; &println test2
    &print_s test1; &print " => "; &println_s test2
}
//test_sign_extend

.define test_sign_extend /immediate imm ''13 {
    .variable test1 '' 13;
    &mov test1, imm
    &print test1; &print " "; &print_x test1; &print " "; &println_b test1
}
test_sign_extend -3

&println "VIRTUAL REGISTER"
&print zero; addi zero, x0, 13; &print " => "; &println zero

&println "BITWISE ACCESS"
.define test_bitwise /immediate imm ''24 {
    &mov t0, 0xd
    &print_x t0
    
    &mov t0'19:8, imm'11:0
    &print " => "; &print_x t0
    
    &mov t0'15:8, t0'0:7
    &print " => "; &print_x t0
    
    &mov t0'15:8, t0'12:19
    &print " => "; &print_x t0
    
    &println
}
test_bitwise -22

&println "DYNAMIC LENGTH"
.define test_length /immediate len ''maxu500 {
    &normalize len
    &assert len <= 500
    
    .variable test ''len
    &mov test, -6
    &print test; &print ", "; &print_x test; &print ", "; &println_b test
    
    &sub len, len, 2
    &addc test, test'len:0, test'len:0
    &print "*2: "; &print test; &print ", "; &print_x test; &print ", "; &println_b test
}
test_length 23

&println "IMMEDIATE INDIRECTION"
.define test_immediate_indirection /immediate imm ''9 {
    &println imm
    &test_immediate_indirection imm
}
.define &test_immediate_indirection /variable var ''9 {
    &println var
}
test_immediate_indirection -9

&println "MEMORY"
.define test_memory /immediate imm ''8 {
    .variable tmp ''8
    .variable addr ''32
    
    &mov addr, 15; &print addr; &print ": "
    &mov tmp, @addr; &print_x tmp;
    &mov @addr, -42;
    &mov tmp, @addr; &print " => "; &println_x tmp
    
    &mov addr, 12; &print addr; &print ": "
    &mov tmp, @addr; &print_x tmp;
    &mov @addr, imm
    &mov tmp, @addr; &print " => "; &println_x tmp
    &assert tmp == imm
}
test_memory 113
lw t0, 12(zero)
&println_x t0

&println "SYSTEM INFO"
.define test_system_info /immediate length ''maxu14 {
    .var tmp ''length
    
    &get_memory_word_length tmp;     &print "word length: ";              &print tmp
    &get_memory_address_length tmp;  &print "; address length: ";         &print tmp
    &get_program_counter_length tmp; &print "; program counter length: "; &println tmp
}
test_system_info 10

&println "That's all folks"
